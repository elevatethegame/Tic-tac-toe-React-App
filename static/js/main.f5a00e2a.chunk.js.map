{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","winner","stepNumber","slice","length","lines","a","b","c","calculateWinner","setState","moveNum","status","current","moves","map","step","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"uNAIA,SAASA,EAAOC,GACV,OACE,wBACEC,UAAU,SACVC,QAAUF,EAAME,QAFlB,SAIGF,EAAMG,Q,IAKXC,E,kKAEJ,SAAaC,GAAI,IAAD,OACd,OACE,cAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAKxC,WACE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA3BTC,IAAMC,WAkCpBC,E,kDAEJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,SAAS,EACTC,OAAQ,KACRC,WAAY,GARG,E,+CAYnB,SAAYb,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQM,MAAM,EAAGb,KAAKM,MAAMM,WAAa,GAE9DX,EADUM,EAAQA,EAAQO,OAAS,GACjBb,QAAQY,QAChC,IAAIZ,EAAQF,KAAMC,KAAKM,MAAMK,OAA7B,CAEAV,EAAQF,GAAKC,KAAKM,MAAMI,QAAS,IAAM,IACvC,IAAMC,EAmEV,SAAyBV,GAWvB,IAVA,IAAMc,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAhB,EAAI,EAAGA,EAAIgB,EAAMD,OAAQf,IAAK,CAAC,IAAD,cACnBgB,EAAMhB,GADa,GAC9BiB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIjB,EAAQe,IAAMf,EAAQe,KAAOf,EAAQgB,IAAMhB,EAAQgB,KAAOhB,EAAQiB,GACpE,OAAOjB,EAAQe,GAEnB,OAAO,KAnFUG,CAAgBlB,GAC/BD,KAAKoB,SAAS,CACZb,QAAQ,GAAD,mBACFA,GADE,CAEL,CACEN,QAASA,KAGbS,SAAUV,KAAKM,MAAMI,QACrBC,OAAQA,EACRC,WAAYZ,KAAKM,MAAMM,WAAa,O,oBAIxC,SAAOS,GACLrB,KAAKoB,SAAS,CACZR,WAAYS,EACZX,QAASW,EAAU,IAAM,M,oBAI7B,WAAU,IAeJC,EAfG,OACDf,EAAUP,KAAKM,MAAMC,QACrBgB,EAAUhB,EAAQP,KAAKM,MAAMM,YAE7BY,EAAQjB,EAAQkB,KAAI,SAACC,EAAML,GAC/B,IAAMM,EAAON,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQzB,QAAS,kBAAM,EAAKgC,OAAOP,IAAnC,SAAgDM,KADxCN,MAad,OALEC,EADEtB,KAAKM,MAAMK,OACJ,WAAaX,KAAKM,MAAMK,OAExB,iBAAmBX,KAAKM,MAAMI,QAAU,IAAM,KAIvD,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASsB,EAAQtB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,8BAAO2B,IACP,6BAAME,c,GA1EGrB,IAAMC,WAmFzB0B,IAASC,OACP,cAAC1B,EAAD,IACA2B,SAASC,eAAe,U","file":"static/js/main.f5a00e2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n      return (\r\n        <button \r\n          className=\"square\" \r\n          onClick={ props.onClick }\r\n        >\r\n          {props.value}\r\n        </button>\r\n      );\r\n  }\r\n  \r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[i]} \r\n        onClick={() => this.props.onClick(i)} \r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null)\r\n      }],\r\n      xIsNext: true,\r\n      winner: null,\r\n      stepNumber: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();  // Make a copy of latest board, do not modify directly\r\n    if (squares[i] || this.state.winner)  // Do nothing if square already full or winner already found\r\n      return;\r\n    squares[i] = this.state.xIsNext? 'X' : 'O';\r\n    const winner = calculateWinner(squares);\r\n    this.setState({\r\n      history: [\r\n        ...history,\r\n        {\r\n          squares: squares,\r\n        }\r\n      ],\r\n      xIsNext: !this.state.xIsNext,\r\n      winner: winner,\r\n      stepNumber: this.state.stepNumber + 1\r\n    });\r\n  }\r\n\r\n  jumpTo(moveNum) {\r\n    this.setState({\r\n      stepNumber: moveNum,\r\n      xIsNext: moveNum % 2 === 0,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n\r\n    const moves = history.map((step, moveNum) => {\r\n      const desc = moveNum ?\r\n        'Go to move #' + moveNum :\r\n        'Go to game start';\r\n      return (\r\n        <li key={ moveNum }>\r\n          <button onClick={() => this.jumpTo(moveNum) }>{ desc }</button>\r\n        </li>\r\n      )\r\n    });\r\n\r\n    let status;\r\n    if (this.state.winner) {\r\n      status = 'Winner: ' + this.state.winner;\r\n    } else {  \r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n    \r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board  \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{ status }</div>\r\n          <ol>{ moves }</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\n// ========================================\r\n  \r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) \r\n      return squares[a];\r\n  }\r\n  return null;\r\n}\r\n  "],"sourceRoot":""}